/*
 * The MIT License
 *
 * Copyright 2019 Thomas Lehmann.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package comfortable.data.tools;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
import comfortable.data.model.CustomMediaType;
import java.io.IOException;
import org.msgpack.jackson.dataformat.MessagePackFactory;
import org.springframework.http.MediaType;

/**
 * Serialization and deserialization for objects of the defined type (generic) supporting XML, JSON
 * and YAML.
 *
 * @param <E> the type to use for the serialization and deserialization.
 */
@SuppressWarnings("PMD.DataflowAnomalyAnalysis")
public class ContentConverter<E> {

    /**
     * the class required for deserialization.
     */
    private final transient Class<E> theClass;

    /**
     * required by {@link ContentConverter#fromString(java.lang.String)}.
     */
    private final transient MediaType source;

    /**
     * required by {@link ContentConverter#toString(java.lang.Object)}.
     */
    private final transient MediaType destination;

    /**
     * Initializing source format and destination format for conversion. Supported are JSON, XML and
     * YAML.
     *
     * @param initTheClass required for the deserialization (fromString).
     * @param initSource format of the data passed to
     * {@link ContentConverter#fromString(java.lang.String)}.
     * @param initDestination format of the data generated by
     * {@link ContentConverter#toString(java.lang.Object)}.
     */
    public ContentConverter(final Class<E> initTheClass, final MediaType initSource,
            final MediaType initDestination) {
        this.theClass = initTheClass;
        this.source = initSource;
        this.destination = initDestination;
    }

    /**
     * Initializing source format and destination format for conversion. Supported are JSON, XML and
     * YAML.
     *
     * @param initTheClass the class to be used when doing deserialization.
     * @param both the media type will be used for convertions in both directions.
     */
    public ContentConverter(final Class<E> initTheClass, final MediaType both) {
        this.theClass = initTheClass;
        this.source = both;
        this.destination = both;
    }

    /**
     * Deserializes data from string using the conversion defined by the source media type.
     *
     * @param content the data as string.
     * @return deserialized data as instance of the defined generic type.
     * @throws IOException happens when conversion has failed.
     */
    public E fromString(final String content) throws IOException {
        E result = null;
        if (this.source == CustomMediaType.APPLICATION_JSON) {
            final var mapper = new ObjectMapper();
            result = mapper.readValue(content, this.theClass);
        } else if (this.source == CustomMediaType.APPLICATION_XML) {
            final var xmlMapper = new XmlMapper();
            result = xmlMapper.readValue(content, this.theClass);
        } else if (this.source == CustomMediaType.APPLICATION_YAML) {
            final var yamlMapper = new ObjectMapper(new YAMLFactory());
            result = yamlMapper.readValue(content, this.theClass);
        } else if (this.source == CustomMediaType.APPLICATION_MSGPACK) {
            final var msgPackMapper = new ObjectMapper(new MessagePackFactory());
            result = msgPackMapper.readValue(content, this.theClass);
        }
        return result;
    }

    /**
     * Deserializes data from string using the conversion defined by the source media type.
     *
     * @param content the data as byte array.
     * @return deserialized data as instance of the defined generic type.
     * @throws IOException happens when conversion has failed.
     */
    public E fromBytes(final byte[] content) throws IOException {
        E result = null;
        if (this.source == CustomMediaType.APPLICATION_MSGPACK) {
            final var msgPackMapper = new ObjectMapper(new MessagePackFactory());
            result = msgPackMapper.readValue(content, this.theClass);
        }
        return result;
    }

    /**
     * Converting object into defined destination format (XML, JSON or YAML).
     *
     * @param object the object to convert.
     * @return pass object as string in given format or an empty string when destination type is not
     * supported.
     * @throws JsonProcessingException when conversion has failed.
     */
    public String toString(final E object) throws JsonProcessingException {
        var result = "";
        if (this.destination == CustomMediaType.APPLICATION_JSON) {
            final var mapper = new ObjectMapper();
            result = mapper.writeValueAsString(object);
        } else if (this.destination == CustomMediaType.APPLICATION_XML) {
            final var xmlMapper = new XmlMapper();
            result = xmlMapper.writeValueAsString(object);
        } else if (this.destination == CustomMediaType.APPLICATION_YAML) {
            final var yamlMapper = new ObjectMapper(new YAMLFactory());
            result = yamlMapper.writeValueAsString(object);
        }
        return result;
    }

    /**
     * Converting object into defined destination format (MSGPACK).
     *
     * @param object the object to convert.
     * @return pass object as string in given format or an empty string when destination type is not
     * supported.
     * @throws JsonProcessingException when conversion has failed.
     */
    public byte[] toBytes(final E object) throws JsonProcessingException {
        byte[] result = null;
        if (this.destination == CustomMediaType.APPLICATION_MSGPACK) {
            final var msgPackMapper = new ObjectMapper(new MessagePackFactory());
            result = msgPackMapper.writeValueAsBytes(object);
        }
        return result;
    }
}
